*FactorialExercise*
Re-define the factorial function

*FactorialForComprehension*
Calculate the factorial of some numbers in a list and send in output factorials%3==0

*MultDivWithDoubleStar*
Create a script that executes division or multiplication and that it explain the operation
Parameters for div/mult and explain-output are passed as keyword

*PassingFunctionAsArgument*
Create a script that pass a function as argument in another function

*RecursiveAppend*
Create a function that recursively appends objects to an array

*SumWithStar*
Create a function that sum a list of integer parameters using the star

*WritingReadingFileTest*
Create a script that allows the user to write on a file
The output will be displayed after the input

*FactorialWithStacks.py*
Add in a stack 5 numbers. It will calculate all factorials and it will filter all factorials%2==0 in another stack

*InstancesCounter.py*
Create a script that counts the instances of a class

*CounterWithDecorator.py*
Create a decorator that counts all instances of a class

*SingletonTest.py*
Create a single administrator that can ban/unban users

*BiblioExercise.py*
Create a single library that contains multiple books. All params should be privates and should be setted with ensures

*AddMethodToClass.py*
Create a static method that if it can't find a method, it will invoke AnotherClass.f method

*DecoratorFFunct.py*
Create a decorator that if it can't find the f function on a class, it will set a new function to the f attribute 
